@page "/category/{categoryname}"

@inject IConfigService Configuration
@inject IContentService Content
@inject IMarkdownService Markdown

@{
    var posts = Content.GetAllPosts(
        p => p is { Published: true, Type: PostType.Normal }
             && p.Category == CategoryName
    );
}

<NavBar/>

<main>
@if(!posts.Any())
{
    <PageTitle>@Configuration.Root!.General.SiteTitle // Category Not Found</PageTitle>
    <NotFound Message="@NotFoundMessage" />
}
else
{
    <PageTitle>@Configuration.Root!.General.SiteTitle // Category '@CategoryName'</PageTitle>

    <HeadContent>
        <meta name="description"
              content="@Configuration.Root!.General.SiteDescription" />
    </HeadContent>

    <div class="filter-header">
        <h1>Displaying posts in category <pre>@CategoryName</pre></h1>
        
        @{
            var contentDescription = @Content.GetCategoryDescription(
                CategoryName
            );

            if (!string.IsNullOrWhiteSpace(contentDescription))
            {
                <h2>@((MarkupString)Markdown.Render(contentDescription))</h2>
            }
        }
    </div>
    
    <Paginator Posts="@posts" />
}
</main>

<Footer/>

@code {
    [Parameter, Required]
    public string CategoryName { get; set; } = string.Empty;

    private string NotFoundMessage
        => $"The are no posts under the requested category <code>{CategoryName}</code> _";
}