@layout AdminShell

@page "/admin/dashboard"
@using System.Diagnostics
@inherits XaelithRestrictedPage

<h1 class="admin-view-title">@Title</h1>

<div class="admin-inner-content">
    <div class="dashboard-header">
        <img src="img/xaelith-bw.svg"
             alt="xaelith logo"
             class="dashboard-logo @(ShowWelcomeMessage ? "visible" : "")"
             height="134" width="150"/>

        <h1 class="welcome-message @(ShowWelcomeMessage ? "visible" : "")">
            @((MarkupString)WelcomeMessage)
        </h1>
    </div>

    <div class="dashboard-stats">
        @for (var i = 0; i < StatisticsEntries.Count; i++)
        {
            var statEntry = StatisticsEntries[i];

            if (statEntry != null)
            {
                var value = statEntry.ValueExpression.Invoke()?.ToString() ?? "null";

                <div class="stat-entry @(StatShowCounter > i ? "visible" : "")">
                    <span class="stat-name">
                        @((MarkupString)statEntry.Name)
                    </span>

                    <span class="stat-value">
                        @((MarkupString)(value ?? "N/A"))
                    </span>
                </div>
            }
            else
            {
                <br/>
            }
        }
    </div>
</div>

@code {
    [CascadingParameter]
    public UserContext UserContext { get; set; } = null!;

    public bool ShowWelcomeMessage { get; set; }
    public int StatShowCounter { get; set; }

    private List<StatisticsEntry?> StatisticsEntries { get; set; } = null!;

    public string WelcomeMessage
    {
        get
        {
            var time = DateTime.Now;

            if (time.Hour >= 0 && time.Hour <= 4)
            {
                return $"Still not sleeping, {UserContext.User?.DisplayName ?? "user"}?<br />" +
                       $"Please take care of yourself. ";
            }
            else if (time.Hour >= 5 && time.Hour <= 11)
            {
                return $"Good morning, {UserContext.User?.DisplayName ?? "user"}! ";
            }
            else if (time.Hour >= 12 && time.Hour <= 17)
            {
                return $"Good afternoon, {UserContext.User?.DisplayName ?? "user"}! ";
            }
            else if (time.Hour >= 18 && time.Hour <= 22)
            {
                return $"Good evening, {UserContext.User?.DisplayName ?? "user"}! ";
            }
            else
            {
                return $"You should go to sleep, {UserContext.User?.DisplayName ?? "user"}.<br />" +
                       $"Really. Like, now. ";
            }
        }
    }

    protected override string Title => "dashboard";

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Configuration.Root!.Statistics.DashboardViewCount++;
        Configuration.Save();

        StatisticsEntries = new List<StatisticsEntry?>
        {
            new("Today's total visitors", () => "2137"),
            new("Today's unique visitors", () => "2137"),
            new("Lifetime total visitors", () => "2137"),
            new("Lifetime unique visitors", () => "2137"),
            null,
            new("Blog posts", () => Content.GetAllPosts().Count(x => x.Metadata.Published && x.Metadata.Type == PostType.Normal)),
            new("Static pages", () => Content.GetAllPosts().Count(x => x.Metadata.Type == PostType.Static)),
            new("Drafts", () => Content.GetAllPosts().Count(x => !x.Metadata.Published)),
            null,
            new("Content disk usage", () =>
            {
                var bytes = (double)(new DirectoryInfo(WellKnown.Content)
                    .EnumerateFiles("*", SearchOption.AllDirectories)
                    .Sum(file => file.Length));

                return FileSystemUtility.FormatSize(bytes);
            }),
            new("Operating memory usage", () =>
            {
                return FileSystemUtility.FormatSize(
                    Process.GetCurrentProcess().WorkingSet64
                );
            }),
            null,
            new("Times this page was viewed", () => { return Configuration.Root!.Statistics.DashboardViewCount; })
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            ShowWelcomeMessage = true;
            await InvokeAsync(StateHasChanged);
            await Task.Delay(1200);

            for (var i = 0; i < StatisticsEntries.Count; i++)
            {
                StatShowCounter++;

                if (StatisticsEntries[i] == null)
                    continue;

                await InvokeAsync(StateHasChanged);
                await Task.Delay(180);
            }
        }
    }
}