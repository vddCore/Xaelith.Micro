@layout AdminShell

@page "/admin/core/settings"
@inherits XaelithRestrictedPage

@inject IModalService Modal;
@inject IToastService Toast;

<h1 class="admin-view-title">@Title</h1>

<div class="admin-inner-content">
    <EditForm Model="@ConfigurationCopy"
              OnSubmit="@SaveChanges">
        <div class="editor-toolbar">
            <button class="safe"
                    type="submit">
                SAVE
            </button>

            <button class="discard unsafe"
                    type="button"
                    @onclick="@(Discard)">
                DISCARD
            </button>
        </div>

        <SettingsEditor Configuration="ConfigurationCopy"/>
    </EditForm>
</div>

@code {
    [CascadingParameter]
    public UserContext UserContext { get; set; } = null!;

    private Configuration ConfigurationCopy { get; set; } = null!;

    protected override void OnInitialized()
        => Reload();

    protected override string Title => "settings";

    private void Reload()
        => ConfigurationCopy = Configuration.Root!.Copy();

    private void Discard()
    {
        Modal.ShowAsync(
            new DialogModalData(
                "Discard changes?",
                "Confirm discarding changes to system settings. <br />" +
                "This operation is irreversible.",
                "Proceed",
                "Abort",
                DialogModalSeverity.Warning,
                (result) =>
                {
                    if (result)
                        Reload();
                }
            )
        );
    }
    
    private void SaveChanges(EditContext context)
    {
        var config = (Configuration)context.Model;

        if (config.Core.AutosaveIntervalSeconds < 30)
        {
            Fail("Autosave interval must be >= 30");
            return;
        }

        if (config.Core.MaxFileUploadSizeKilobytes < 2048)
        {
            Fail("Maximum file upload size must be >= 2MB");
            return;
        }

        try
        {
            _ = DateTime.Now.ToString(config.General.DateFormat);
        }
        catch
        {
            Fail("Invalid date format provided");
            return;
        }

        if (!config.Rendering.PageBreakToken.StartsWith("[[")
         && !config.Rendering.PageBreakToken.EndsWith("]]"))
        {
            Fail("Page break tokens must be enclosed in [[ ]]");
            return;
        }

        if (config.Content.MaximumPostsPerPage < 3)
        {
            Fail("Posts per page must be >= 3");
            return;
        }
        
        if (config.Content.MaximumPagesInPaginator < 3)
        {
            Fail("Paginator limit must be >= 3");
            return;
        }

        try
        {
            Configuration.Root!.Replace(config);
            Configuration.Save();
            
            Toast.Show(
                "Settings saved",
                ToastSeverity.Success
            );
        }
        catch (Exception e)
        {
            Toast.Show(
                $"Failed to save settings: {e.Message}.",
                ToastSeverity.Error,
                4000
            );
        }
    }

    private void Fail(string why)
        => Toast.Show(why, ToastSeverity.Warning, 3500);
}