@layout AdminShell

@page "/admin/manage/categories"
@inherits XaelithRestrictedPage

@inject IModalService Modals;
@inject IToastService Toasts;

<h1 class="admin-view-title">@Title</h1>

<div class="admin-inner-content">
    <EditForm Model="Context" OnSubmit="@UpdateCategories">
        <div class="editor-toolbar">
            <button class="editor-save-button" type="submit">SAVE</button>

            <button class="category-editor-reset-button"
                    type="button"
                    @onclick="ResetState">
                DISCARD
            </button>

            <button class="category-editor-add-button"
                    type="button"
                    @onclick="AddEmptyCategory">
                NEW CATEGORY
            </button>
        </div>

        <div class="category-editor">
            <table class="admin-table">
                <thead>
                <tr>
                    <th class="category">category</th>
                    <th class="actions">actions</th>
                </tr>
                </thead>
                @for (var i = 0; i < Context.Entries.Count; i++)
                {
                    <tr>
                        @{
                            var index = i;

                            <td class="category">
                                <input type="text"
                                       id="category-name-@index"
                                       class="category-name-edit-field"
                                       @bind="@Context.Entries[index].FirstValue"
                                       placeholder="Awaiting category name..."/>

                                <input type="text"
                                       id="category-description-@index"
                                       class="category-description-edit-field"
                                       @bind="@Context.Entries[index].SecondValue"
                                       placeholder="Awaiting category description..."/>
                            </td>

                            <td class="actions">
                                <a class="danger"
                                   @onclick="@(() => DeleteCategory(index))">
                                    DELETE
                                </a>
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>
    </EditForm>
</div>

@code {
    [CascadingParameter]
    public UserContext UserContext { get; set; } = null!;

    protected override string Title => "categories";

    private DualValueEditContext Context { get; } = new();
    private List<DualValueEditContext.Entry> PreviousState { get; set; } = [];

    protected override void OnInitialized()
    {
        base.OnInitialized();

        foreach (var (name, description) in Configuration.Root!.Content.Categories)
        {
            Context.Entries.Add(new(name, description));
        }

        Context.Entries = Context.Entries
            .OrderBy(x => x.FirstValue)
            .ToList();

        PreviousState = new(Context.Entries);
    }

    private void UpdateCategories(EditContext editContext)
    {
        var context = (DualValueEditContext)editContext.Model;

        foreach (var category in context.Entries)
        {
            if (string.IsNullOrWhiteSpace(category.FirstValue))
                continue;

            Configuration.Root!.Content.Categories[category.FirstValue] = category.SecondValue;
        }

        try
        {
            var uniqueEntries = context.Entries.Select(x => x.FirstValue).Distinct();
            
            if (uniqueEntries.Count() != context.Entries.Count)
            {
                Toasts.Show(
                    "Category names must be unique",
                    ToastSeverity.Error,
                    3500
                );

                return;
            }

            if (context.Entries.SequenceEqual(PreviousState))
            {
                Toasts.Show(
                    "No changes detected - nothing to save",
                    ToastSeverity.Warning,
                    3500
                );

                return;
            }

            context.Entries = context.Entries
                .OrderBy(x => x.FirstValue)
                .ToList();

            PreviousState = new(context.Entries);

            Configuration.Save();
            Toasts.Show(
                "Categories updated",
                ToastSeverity.Success
            );
        }
        catch (Exception e)
        {
            Toasts.Show(
                $"Failed to update categories: {e.Message}",
                ToastSeverity.Error
            );
        }
    }

    private void AddEmptyCategory()
        => Context.Entries.Insert(0, new(string.Empty, string.Empty));

    private void DeleteCategory(int index)
        => Context.Entries.RemoveAt(index);

    private async Task ResetState()
    {
        await Modals.ShowAsync(
            new DialogModalData(
                "Discard changes?",
                "Confirm discarding any changes made to categories.<br/>" +
                "This action is irreversible.",
                "Discard",
                "Cancel",
                DialogModalSeverity.Warning,
                (result) =>
                {
                    if (result)
                        Context.Entries = [..PreviousState];
                }
            )
        );
    }
}