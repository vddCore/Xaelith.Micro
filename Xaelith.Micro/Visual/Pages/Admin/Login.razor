@page "/admin/login"
@inherits XaelithPage
@attribute [RequiresStaticRendering]

@inject IBCryptPasswordHasher Hasher;

<HeadContent>
    <link rel="stylesheet" href="style/admin/login.css"/>
    <script src="lib/xaelith/login.js" defer></script>

    @if (UserContext.IsAuthenticated)
    {
        <script>
            window.location.href = '/admin/dashboard';
        </script>
    }
</HeadContent>

<div class="wave-row top"></div>

<div class="login-container">
    <div class="login-box">
        <div class="login-title">
            <a href="@Configuration.Root!.General.SiteUrl">
                @Configuration.Root!.General.SiteTitle
            </a>
        </div>
        
        @if (Navigation.QueryString("failure") == "1")
        {
            <div class="login-subtitle failure">
                authentication failure
            </div>
        }
        else
        {
            <div class="login-subtitle">
                authentication required
            </div>
        }
        
        <EditForm class="user-login"
                  FormName="UserLogin" 
                  Model="Credentials" 
                  OnValidSubmit="AttemptLogin">
            <div class="input-group username-input">
                <label for="username">Login</label>

                <InputText id="username"
                           type="text"
                           placeholder="Awaiting User ID..."
                           @bind-Value="@Credentials.Username"/>
            </div>

            <div class="input-group password-input">
                <label for="password">Password</label>

                <InputText id="password"
                           type="password"
                           placeholder="Awaiting password..."
                           @bind-Value="@Credentials.Password"/>
            </div>
            
            <div class="input-group">
                <div class="input-row">
                    <CustomInputCheckbox Id="remember-login"
                                         Label="remember"
                                         @bind-Value="@Credentials.RememberLogin"/>

                    <div class="input-submit">
                        <button id="login-submit"
                                type="submit">SIGN-IN //</button>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>

<div class="wave-row bottom"></div>

@code {
    [CascadingParameter]
    public HttpContext HttpContext { get; set; } = null!;

    [CascadingParameter]
    public UserContext UserContext { get; set; } = null!;

    [SupplyParameterFromForm]
    public UserCredentials Credentials { get; set; } = new();

    private async Task AttemptLogin()
    {
        var user = await UserStore.FindByNameAsync(Credentials.Username);

        if (user == null)
        {
            Navigation.NavigateTo(
                "/admin/login?failure=1",
                true
            );
            
            return;
        }
        
        var passwordVerificationResult = Hasher.Verify(
            Credentials.Password,
            user.PasswordHash
        );

        if (passwordVerificationResult == PasswordVerificationResult.Failed)
        {
            Navigation.NavigateTo(
                "/admin/login?failure=1",
                true
            );
            
            return;
        }

        var claims = new List<Claim>
        {
            new(ClaimTypes.Name, Credentials.Username),
            new(ClaimTypes.IsPersistent, Credentials.RememberLogin.ToString()),
            new(ClaimTypes.Sid, user!.Id.ToString("D"))
        };

        var identity = new ClaimsIdentity(
            claims,
            CookieAuthenticationDefaults.AuthenticationScheme
        );

        var principal = new ClaimsPrincipal(identity);

        await HttpContext.SignInAsync(principal, new AuthenticationProperties
        {
            IsPersistent = Credentials.RememberLogin
        });
                
        Navigation.NavigateTo(
            "/admin/dashboard",
            true
        );
    }
}