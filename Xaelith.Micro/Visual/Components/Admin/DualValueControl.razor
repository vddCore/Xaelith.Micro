<div class="dual-value-row">
    @if (ShowReorderArrows)
    {
        <div class="dual-value-move-buttons">
            <a class="dual-value-moveup"
               @onclick="@RequestMoveUp">
                <i class="las la-arrow-up"></i>
            </a>

            <a class="dual-value-movedown"
               @onclick="@RequestMoveDown">
                <i class="las la-arrow-down"></i>
            </a>
        </div>
    }

    <div class="dual-value-pair">
        <div class="dual-value-container dual-value-first">
            <div class="dual-value-container-label">
                @FirstValueLabel
            </div>

            <input type="text"
                   id="@FirstValueId"
                   class="@FirstValueClass"
                   @bind="@Entry.FirstValue"
                   @oninput="@OnFirstValueChanged"
                   placeholder="@FirstValuePlaceholder"/>
        </div>

        <div class="dual-value-container dual-value-second">
            <div class="dual-value-container-label">
                @SecondValueLabel
            </div>

            <input type="text"
                   id="@SecondValueId"
                   class="@SecondValueClass"
                   @bind="@Entry.SecondValue"
                   @oninput="@OnSecondValueChanged"
                   placeholder="@SecondValuePlaceholder"/>
        </div>
    </div>

    <a class="dual-value-delete danger"
       @onclick="@RequestDelete">
        <i class="las la-trash"></i>
    </a>
    
    @if (@ChildContent != null)
    {
        <div class="dual-value-extra">
            @ChildContent
        </div>
    }
</div>

@code {
    [Parameter]
    public required DualValueEditContext.Entry Entry { get; set; }

    [Parameter]
    public string FirstValueId { get; set; } = string.Empty;

    [Parameter]
    public string FirstValueClass { get; set; } = string.Empty;

    [Parameter]
    public string FirstValuePlaceholder { get; set; } = string.Empty;

    [Parameter]
    public string FirstValueLabel { get; set; } = "Value 1";

    [Parameter]
    public string SecondValueId { get; set; } = string.Empty;

    [Parameter]
    public string SecondValueClass { get; set; } = string.Empty;

    [Parameter]
    public string SecondValuePlaceholder { get; set; } = string.Empty;

    [Parameter]
    public string SecondValueLabel { get; set; } = "Value 2";

    [Parameter]
    public bool ShowReorderArrows { get; set; }
    
    [Parameter]
    public EventCallback OnFirstValueChanged { get; set; }

    [Parameter]
    public EventCallback OnSecondValueChanged { get; set; }

    [Parameter]
    public EventCallback<DualValueEditContext.Entry> OnDeleteRequested { get; set; }

    [Parameter]
    public EventCallback<DualValueEditContext.Entry> OnMoveUpRequested { get; set; }
    
    [Parameter]
    public EventCallback<DualValueEditContext.Entry> OnMoveDownRequested { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private async Task RequestDelete()
    {
        if (OnDeleteRequested.HasDelegate)
        {
            await OnDeleteRequested.InvokeAsync(Entry);
        }
    }
    
    private async Task RequestMoveUp()
    {
        if (OnMoveUpRequested.HasDelegate)
        {
            await OnMoveUpRequested.InvokeAsync(Entry);
        }
    }
    
    private async Task RequestMoveDown()
    {
        if (OnMoveDownRequested.HasDelegate)
        {
            await OnMoveDownRequested.InvokeAsync(Entry);
        }
    }
}