<div class="dual-value-editor-toolbar editor-toolbar">
    <button class="safe"
            type="submit">SAVE
    </button>

    <button class="dual-value-tool discard unsafe"
            type="button"
            @onclick="@(RequestDiscard)">
        @DiscardLabel
    </button>

    <button class="dual-value-tool add"
            type="button"
            @onclick="@(RequestAddNew)">
        @(AddNewLabel)
    </button>
</div>

@if (ValueEditContext.Entries.Any())
{
    <div class="dual-value-editor @ListContainerClass">
        <div class="dual-value-list-view">
            @for (var i = 0; i < ValueEditContext.Entries.Count; i++)
            {
                var index = i;

                <DualValueControl Entry="ValueEditContext.Entries[index]"
                                  ShowReorderArrows="@AllowReorder"
                                  OnMoveUpRequested="@OnMoveUpRequested"
                                  OnMoveDownRequested="@OnMoveDownRequested"
                                  FirstValueId="@FirstValueId"
                                  FirstValueClass="@FirstValueClass"
                                  FirstValuePlaceholder="@FirstValuePlaceholder"
                                  SecondValueId="@SecondValueId"
                                  SecondValueClass="@SecondValueClass"
                                  SecondValuePlaceholder="@SecondValuePlaceholder"
                                  OnFirstValueChanged="@(() => RaiseFirstValueChanged(@index))"
                                  OnSecondValueChanged="@(() => RaiseSecondValueChanged(@index))"
                                  FirstValueLabel="@FirstValueLabel"
                                  SecondValueLabel="@SecondValueLabel"
                                  OnDeleteRequested="@(() => RequestEntryDeletion(ValueEditContext.Entries[index]))" />
            }
        </div>
    </div>
}
else
{
    @("There are no entries to display. Add some?")
}

@code {
    [Parameter]
    public required DualValueEditContext ValueEditContext { get; set; }

    [Parameter]
    public required string ListContainerClass { get; set; } = string.Empty;

    [Parameter]
    public string ActionsColumnClass { get; set; } = string.Empty;

    [Parameter]
    public string FirstValueId { get; set; } = string.Empty;

    [Parameter]
    public string FirstValueClass { get; set; } = string.Empty;

    [Parameter]
    public string FirstValueLabel { get; set; } = "Name";

    [Parameter]
    public string FirstValuePlaceholder { get; set; } = string.Empty;

    [Parameter]
    public string SecondValueId { get; set; } = string.Empty;

    [Parameter]
    public string SecondValueClass { get; set; } = string.Empty;

    [Parameter]
    public string SecondValueLabel { get; set; } = "Desc.";
    
    [Parameter]
    public string SecondValuePlaceholder { get; set; } = string.Empty;

    [Parameter]
    public string DiscardLabel { get; set; } = "Discard";

    [Parameter]
    public string AddNewLabel { get; set; } = "Add";

    [Parameter]
    public string DeleteLabel { get; set; } = "Delete";

    [Parameter]
    public EventCallback<int> OnDeleteRequested { get; set; }

    [Parameter]
    public EventCallback<DualValueEditContext.Entry> OnMoveUpRequested { get; set; }

    [Parameter]
    public EventCallback<DualValueEditContext.Entry> OnMoveDownRequested { get; set; }

    [Parameter]
    public EventCallback OnDiscardRequested { get; set; }

    [Parameter]
    public EventCallback OnAddRequested { get; set; }

    [Parameter]
    public EventCallback<int> OnFirstValueChanged { get; set; }

    [Parameter]
    public EventCallback<int> OnSecondValueChanged { get; set; }

    [Parameter]
    public bool AllowReorder { get; set; }

    private async Task RequestDeleteByIndex(int index)
    {
        if (OnDeleteRequested.HasDelegate)
        {
            await OnDeleteRequested.InvokeAsync(index);
        }
    }

    private async Task RaiseFirstValueChanged(int index)
    {
        if (OnFirstValueChanged.HasDelegate)
        {
            await OnFirstValueChanged.InvokeAsync(index);
        }
    }

    private async Task RaiseSecondValueChanged(int index)
    {
        if (OnSecondValueChanged.HasDelegate)
        {
            await OnSecondValueChanged.InvokeAsync(index);
        }
    }

    private async Task RequestDiscard()
    {
        if (OnDiscardRequested.HasDelegate)
        {
            await OnDiscardRequested.InvokeAsync();
        }
    }

    private async Task RequestAddNew()
    {
        if (OnAddRequested.HasDelegate)
        {
            await OnAddRequested.InvokeAsync();
        }
    }

    private async Task RequestEntryDeletion(DualValueEditContext.Entry entry)
    {
        await RequestDeleteByIndex(ValueEditContext.Entries.IndexOf(entry));
    }
}