@using GaelJ.BlazorCodeMirror6.Models
<div class="input-group">
    <label for="md-editor-area">Content</label>

    <div id="md-editor-area">
        <CodeMirror6Wrapper Placeholder="AWAITING CONTENT..."
                            TabSize="2"
                            IndentationUnit="2"
                            Language="CodeMirrorLanguage.Markdown"
                            AutoFormatMarkdown=@false
                            Setup="@Setup"
                            PreviewImages=@false
                            FullScreen=@false
                            Doc="@EditorContext.Markdown"
                            DocChanged="OnMarkdownInput"
                            MaxHeight="760px" 
                            HighlightActiveLine=@true
                            HighlightTrailingWhitespace=@false
                            HighlightWhitespace=@false
                            HighlightActiveLineGutter=@true  />
    </div>

    <div class="md-editor-statusbar">
        <span class="md-editor-status md-editor-status-characters">
             Characters: @EditorContext.Characters
         </span>
    </div>
</div>

@code {
    private readonly CodeMirrorSetup Setup = new() {
        BindMode = DocumentBindMode.OnInput,
        Autocompletion = false,
        History = true,
        IndentWithTab = true,
        IndentOnInput = false,
        AllowMentions = false,
        FocusOnCreation = true,
        SyntaxHighlighting = false,
        BracketMatching = false
    };
    
    [Parameter]
    public required EditorContext EditorContext { get; set; } = null!;

    [Parameter]
    public EventCallback<string> OnMarkdownEdited { get; set; }

    private async Task OnMarkdownInput(string? content)
    {
        EditorContext.Markdown = content ?? string.Empty;

        if (OnMarkdownEdited.HasDelegate)
        {
            await OnMarkdownEdited.InvokeAsync(EditorContext.Markdown);
        }
    }
}