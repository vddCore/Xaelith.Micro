@inject IContentService Content
@inject IConfigService Configuration
@inject IJSRuntime JS;

<div class="input-row">
    <div class="input-group">
        <label for="md-editor-title">Title</label>
        <input id="md-editor-title"
               type="text"
               spellcheck="false"
               placeholder="Enter a title..."
               @bind="@EditorContext.Title"
               @oninput="TitleChanged"/>
    </div>
    
    <div class="input-group">
        <label for="md-editor-slug">Slug</label>
        <input id="md-editor-slug"
               type="text"
               spellcheck="false"
               placeholder="Enter a slug..."
               @bind="@EditorContext.Slug"/>
    </div>
</div>

<div class="input-row">
    <div class="input-group">
        <label for="md-editor-description">Description</label>
        <input id="md-editor-description"
               type="text"
               spellcheck="false"
               placeholder="Enter a description..."
               @bind="@EditorContext.Description"/>
    </div>

    <div class="input-group">
        <label for="md-editor-publish-date">Publish Date</label>
        <input id="md-editor-publish-date"
               type="text"
               spellcheck="false"
               placeholder="Awaiting publish date..."
               @bind="@EditorContext.PublishDateString"/>
    </div>
</div>

<div class="input-row">
    <div class="input-group">
        <label for="md-editor-post-type">Type</label>
        
        <span id="md-editor-post-type-placeholder"
              class="combobox-placeholder">
            Initializing...    
        </span>
        
        <select id="md-editor-post-type"
                style="display: none;"
                @bind="@EditorContext.PostType">
            @foreach (var value in Enum.GetValues<PostType>())
            {
                <option value="@value">@EnumUtility.GetDisplayName(value)</option>
            }
        </select>
    </div>

    @if (EditorContext.PostType == PostType.Normal)
    {
        <div class="input-group">
            <label for="md-editor-category">Category</label>
            
            <span id="md-editor-category-placeholder"
                  class="combobox-placeholder">
                Initializing...    
            </span>
            
            <select id="md-editor-category"
                    style="display: none;"
                    @bind="EditorContext.Category">
                @foreach (var (name, _) in Configuration.Root!.Content.Categories)
                {
                    <option>@name</option>
                }
            </select>
        </div>

        <div class="input-group">
            <label for="md-editor-tags">Tags</label>
            <input id="md-editor-tags"
                   type="text"
                   spellcheck="false"
                   placeholder="Enter tags..."
                   @bind="@EditorContext.TagList"/>
        </div>
    }
</div>

@code {
    [Parameter]
    public required EditorContext EditorContext { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        await JS.InvokeVoidAsync(
            "window.xaelith.admin.initSelect",
            "#md-editor-category",
            false,
            true,
            "Select a category...",
            "#md-editor-category-placeholder"
        );

        await JS.InvokeVoidAsync(
            "window.xaelith.admin.initSelect",
            "#md-editor-post-type",
            false,
            false,
            "Select a type...",
            "#md-editor-post-type-placeholder"
        );
    }

    private void TitleChanged(ChangeEventArgs e)
    {
        EditorContext.Slug = Content.GenerateSlug(e.Value?.ToString() ?? string.Empty);
    }
}