@implements IDisposable

@inject IToastService Toasts

<div class="toast @(_visibilityClass) @(_currentToastData != null ? _currentToastData?.Severity.ToString().ToLower() : string.Empty)">
    @(_currentToastData?.Message ?? string.Empty)
</div>

@code {
    private string _visibilityClass = "hide";
    private ToastData? _currentToastData;

    protected override void OnInitialized()
    {
        Toasts.OnDisplayed += OnDisplayed;
    }

    private async void OnDisplayed(ToastData toastData)
    {
        try
        {
            _currentToastData = toastData;
            _visibilityClass = "show";
            await InvokeAsync(StateHasChanged);
            await Task.Delay(400);
            
            await Toasts.DisplayedAsync();
            await InvokeAsync(StateHasChanged);

            _visibilityClass = "hide";
            await InvokeAsync(StateHasChanged);
            await Task.Delay(400);

            _currentToastData = null;
            await InvokeAsync(StateHasChanged);
        }
        catch
        {
            /* Ignore */
        }
    }

    public void Dispose()
    {
        Toasts.OnDisplayed -= OnDisplayed;
    }
}