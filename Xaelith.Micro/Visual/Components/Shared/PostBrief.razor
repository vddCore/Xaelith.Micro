@using System.ComponentModel.DataAnnotations
@using Xaelith.Micro.Infrastructure.DataModel.Core.Content
@using Xaelith.Micro.Infrastructure.ServiceModel.Core
@using Xaelith.Micro.Infrastructure.ServiceModel.Core.Content

@inject IJSRuntime JsRuntime
@inject IConfigService Configuration
@inject IContentService Content
@inject IMarkdownService Markdown

<section class="post">
    <div class="post-titlebar">
        <h1 class="post-title">
            <a href="/view/@Post.Slug">@Post.Title</a>
        </h1>

        <div class="post-toolbar">
            <a class="post-toolbar-link" href="/admin/edit/@Id.ToString("D")">
                <i class="las la-edit"></i>
                edit
            </a>
        </div>
    </div>

    @if (!string.IsNullOrWhiteSpace(Post.Description))
    {
        <h2 class="post-subtitle">
            @Post.Description
        </h2>
    }

    <div class="post-content">
        @{
            var body = Content.GetPostBody(Id);
            var pbToken = Configuration.Root!.Rendering.PageBreakToken;
            var pbIndex = -1;
            
            if (!string.IsNullOrWhiteSpace(pbToken))
            {
                pbIndex = body.IndexOf(
                    pbToken,
                    StringComparison.InvariantCulture
                );

                if (pbIndex >= 0)
                {
                    @((MarkupString)Markdown.RenderBrief(
                        body,
                        pbIndex
                    ))
                }
                else
                {
                    @((MarkupString)Markdown.Render(body))
                }
            }
            else
            {
                @((MarkupString)Markdown.Render(body))
            }
        }
    </div>

    <PostMeta Post="Post" 
              ShowReadMore="@(pbIndex > 0)" />
</section>

@code {
    [Parameter, Required]
    public Guid Id { get; set; } = Guid.Empty;

    [Parameter, Required]
    public Post Post { get; set; } = null!;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("xaelith.onLoad.highlightAll");
        }
    }
}