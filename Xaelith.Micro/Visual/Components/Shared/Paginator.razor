@implements IDisposable

@inject NavigationManager Navigation
@inject IConfigService Configuration;
@inject IContentService Content;

<div class="paginator-container">
    <div class="paginator-post-list">
        @{
            foreach (var post in PostsToRender)
            {
                <PostBrief Post="@post"/>
            }
        }
    </div>

    @if (PageCount > 1)
    {
        <div class="pagination">
            @if (CurrentPage > 1)
            {
                <span class="pagination-button">
                <a href="@Navigation.GetUriWithQueryParameter("page", CurrentPage - 1)">⇐ PREV </a>
            </span>
            }
            else
            {
                <span class="pagination-button inactive">
                ⇐ PREV
            </span>
            }

            <ul>
                @for (var i = PaginationStart; i <= PaginationEnd; i++)
                {
                    <li>
                        @if (i == CurrentPage)
                        {
                            <span class="pagination-link current-page">
                            @(i)
                        </span>
                        }
                        else
                        {
                            <a class="pagination-link"
                               href="@Navigation.GetUriWithQueryParameter("page", i)">
                                @(i)
                            </a>
                        }
                    </li>
                }
            </ul>

            @if (CurrentPage < PageCount)
            {
                <span class="pagination-button">
                <a href="@Navigation.GetUriWithQueryParameter("page", CurrentPage + 1)">NEXT ⇒</a>
            </span>
            }
            else
            {
                <span class="pagination-button inactive">
                NEXT ⇒
            </span>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public required List<Post> Posts { get; set; }

    protected int PaginationLimit { get; private set; }

    protected int PaginationStart => Math.Max(
        1,
        Math.Min(
            CurrentPage - PaginationLimit / 2,
            PageCount - PaginationLimit + 1
        )
    );

    protected int PaginationEnd => Math.Min(
        PageCount,
        PaginationStart + PaginationLimit - 1
    );

    protected int CurrentPage { get; private set; } = 1;
    protected int PostsPerPage { get; private set; }
    protected int PageCount { get; private set; }

    protected List<Post> PostsToRender { get; private set; } = [];

    protected override void OnInitialized()
    {
        base.OnInitialized();

        PaginationLimit = Configuration.Root!.Content.MaximumPagesInPaginator;
        PostsPerPage = Configuration.Root!.Content.MaximumPostsPerPage;
        PageCount = (Posts.Count / PostsPerPage) + 1;
        UpdatePageFromQuery();

        Navigation.LocationChanged += OnLocationChanged;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        PaginationLimit = Configuration.Root!.Content.MaximumPagesInPaginator;
        PostsPerPage = Configuration.Root!.Content.MaximumPostsPerPage;
        PageCount = (Posts.Count / PostsPerPage) + 1;
        UpdatePageFromQuery();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        UpdatePageFromQuery();
        StateHasChanged();
    }

    private void UpdatePageFromQuery()
    {
        int page;

        var pageString = Navigation.QueryString("page");
        if (!int.TryParse(pageString, out page))
            page = 1;

        page = Math.Clamp(page, 1, PageCount);
        CurrentPage = page;

        var startAt = (CurrentPage - 1) * PostsPerPage;

        PostsToRender = Posts
            .Skip(startAt)
            .Take(PostsPerPage)
            .ToList();
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }
}